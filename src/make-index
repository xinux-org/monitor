#!/usr/bin/perl
use warnings;
use strict;
use 5.032;

use autodie;

use DateTime;
use HTML::Tidy;
use JSON;

use constant TZ => DateTime::TimeZone->new(name => 'UTC');
use constant SINCE => DateTime->now(time_zone => TZ)->subtract(months => 3);

die "USAGE: $0 DIRECTORY\n" unless @ARGV;

my ($base_dir) = @ARGV;

sub get_releases :prototype() {
  # Read a directory, skipping dot files
  my sub scandir :prototype($) {
    opendir my $dir, $_[0];

    grep !/^\./, readdir $dir
  }

  # Custom sort comparator: pushes README.txt to the end of the list but otherwise
  # uses normal string comparison
  my sub by_filename {
    return 1 if $a eq 'README.txt';
    return -1 if $b eq 'README.txt';
    return $a cmp $b;
  }

  my sub by_channel_variant {
    $a->{channel} cmp $b->{channel} or
    $a->{variant} cmp $b->{variant}
  }

  # Gets the commit history for a given channel name. The history is limited to the past 3 months
  # (see the SINCE constant).
  my sub get_history :prototype($) {
    my ($channel_name) = @_;
    my @history;

    open my $fh, '<', "$base_dir/$channel_name/history-v2";
    while (<$fh>) {
      my ($commit, undef, $epoch) = split ' ';
      my $timestamp = DateTime->from_epoch(epoch => $epoch, time_zone => TZ);

      if ($timestamp >= SINCE) {
        push @history, [$commit, $timestamp->stringify . 'Z'];
      }
    }

    return \@history;
  }

  my %releases;
  for my $channel_name (scandir $base_dir) {
    my $path = "$base_dir/$channel_name";
    next unless -d $path;

    # Parse "nixos-20.09-small" into a triple for easier sorting
    # The naming here is kind of arbitrary but hopefully useful.
    my ($channel, $release, $variant) = split '-', $channel_name;

    push $releases{$release}->@*, {
      name => $channel_name,
      channel => $channel,
      release => $release,
      variant => $variant // '',

      # List of files in this channel directory
      paths => [map "$channel_name/$_", sort by_filename scandir $path],

      # Commit history for the given channel
      history => get_history $channel_name,
    };
  }

  # Sort each of the channels within a release
  for (values %releases) {
    @$_ = sort by_channel_variant @$_;
  }

  return %releases;
}

# Make a string HTML-safe. If the passed-in string is a scalar reference, it is assumed to be
# pre-escaped.
sub escape :prototype($) {
  my ($string) = @_;
  return $$string if ref $string;

  state %remap = (
    '&' => 'amp',
    '"' => 'quot',
    "'" => 'apos',
    '<' => 'lt',
    '>' => 'gt',
  );

  $string =~ s/([&"'<>])/"&$remap{$1};"/eg;
  return $string;
}

# HTML generation helper. Arguments are patterned after typical JS frameworks:
# h(TAG, [ATTRS], [CHILD...])
# TAG: HTML tag name
# ATTRS: Optional hash of element attributes
# CHILD: Optional child elements
#
# Elements and attribute values go through the escape() helper sub.
#
# This function returns a scalar reference.
sub h :prototype($@) {
  # Tags that are "void" (i.e., self-closing)
  state %void = map { $_ => 1 } qw(meta link);

  my ($tag, @children) = @_;
  my %attrs;

  # If the arg after the tag was an attr hash, grab it from the children array
  if (@children > 0 and ref $children[0] eq 'HASH') {
    %attrs = shift(@children)->%*;
  }

  my $html = "<$tag";
  for my $attr (sort keys %attrs) {
    my $value = escape $attrs{$attr};

    $html .= qq{ $attr="$value"};
  }

  # Void tags are closed immediately and returned
  if ($void{$tag}) {
    $html .= " />";
    return \$html;
  }

  $html .= ">";
  for my $child (@children) {
    $html .= escape $child;
  }

  $html .= "</$tag>";
  return \$html;
}

sub path_to_html :prototype(_) {
  my ($path) = @_;
  my (undef, $display) = split '/', $path;

  return h('li', { class => 'channel__url' },
    h('a', { href => $path }, $display),
  );
}

sub channel_to_html :prototype(_) {
  my ($release) = @_;

  return h('div', { class => 'channel' },
    h('h3', { class => 'channel__header' }, $release->{name}),
    h('div', { class => 'channel__urls cols' },
      map path_to_html, $release->{paths}->@*,
    ),
  );
}

sub release_to_html :prototype($@) {
  my ($release, @channels) = @_;

  return h('div', { class => 'release' },
    h('h2', { class => 'release__header' }, $release),
    h('div', { class => 'release__channels cols cols--row' },
      map channel_to_html, @channels,
    ),
  );
}

my %releases = get_releases;
my @release_names = sort { $b cmp $a } keys %releases;

my $head = h('head',
  h('meta', { charset => 'utf-8' }),
  h('meta', { name => 'viewport', content => 'width=device-width, initial-scale=1.0' }),
  h('link', { rel => 'stylesheet', href => 'style.css' }),
);

my $body = h('body',
  h('div', { id => 'container' }),
  map(release_to_html($_, $releases{$_}->@*), @release_names),
  h('script', { src => 'https://cdnjs.cloudflare.com/ajax/libs/d3/6.5.0/d3.min.js' }),
  h('script', { src => 'data.js' }),
  h('script', { src => 'script.js' }),
);

my $html_content = h('html', $head, $body)->$*;

open my $index_html, '>', "$base_dir/index.html";
print { $index_html } HTML::Tidy->new()->clean("<!DOCTYPE html>\n", $html_content);

# Get releases with recent updates and prep them for graphing (see data/script.js)
my @graphed_releases =
  map +{ $_->%{qw(name history)} },
  grep $_->{history}->@* > 0,
  map $releases{$_}->@*, @release_names;

# Create a formatted JSON object with sorted object keys (ensures less noisy diffs)
my $json = JSON->new
  ->pretty
  ->canonical
  ->encode(\@graphed_releases);

# Remove the last newline since we'll be using a semicolon (which is safer)
chomp($json);

open my $data_js, '>', "$base_dir/data.js";
print { $data_js } <<JS;
const graphData = $json;
for (const channel of graphData) {
  for (const commit of channel.history) {
    commit[1] = d3.isoParse(commit[1]);
  }
}
JS
